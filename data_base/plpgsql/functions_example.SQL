-- Function creation
create function get_film_count(len_from int, len_to int)
returns int
language plpgsql
as
$$
declare
   film_count integer;
begin
   select count(*)
   into film_count
   from film
   where length between len_from and len_to;

   return film_count;
end; $$;

select get_film_count(40,90);

select get_film_count(
    len_from => 40,
     len_to => 90
);

select get_film_count(
    len_from := 40,
    len_to := 90
);

select get_film_count(40, len_to => 90);

select get_film_count(len_from => 40, 90);


-- The IN mode
create or replace function find_film_by_id(p_film_id int)
returns varchar
language plpgsql
as $$
declare
   film_title film.title%type;
begin
  -- find film title by id
  select title
  into film_title
  from film
  where film_id = p_film_id;

  if not found then
     raise 'Film with id % not found', p_film_id;
  end if;

  return film_title;
end;$$;

select find_film_by_id(1000);


-- The OUT mode
create or replace function get_film_stat(
    out min_len int,
    out max_len int,
    out avg_len numeric)
language plpgsql
as $$
begin
  select min(length),
         max(length),
		 avg(length)::numeric(5,1)
  into min_len, max_len, avg_len
  from film;
end;$$;

select get_film_stat();

select * from get_film_stat();


-- The INOUT mode
create or replace function swap(
	inout x int,
	inout y int
)
language plpgsql
as $$
begin
   select x,y into y,x;
end; $$;

select * from swap(10,20);


-- Function overloading
create or replace function get_rental_duration(
	p_customer_id integer
)
returns integer
language plpgsql
as $$
declare
	rental_duration integer;
begin
	select
		sum( extract(day from return_date - rental_date))
	into rental_duration
    from rental
	where customer_id = p_customer_id;
	return rental_duration;
end; $$;

SELECT get_rental_duration(232);

create or replace function get_rental_duration(
	p_customer_id integer,
	p_from_date date
)
returns integer
language plpgsql
as $$
declare
	rental_duration integer;
begin
	-- get the rental duration based on customer_id
	-- and rental date
	select sum( extract( day from return_date + '12:00:00' - rental_date))
	into rental_duration
	from rental
	where customer_id = p_customer_id and
		  rental_date >= p_from_date;
	-- return the rental duration in days
	return rental_duration;
end; $$;

SELECT get_rental_duration(232,'2005-07-01');

create or replace function get_rental_duration(
	p_customer_id integer,
	p_from_date date default '2005-01-01'
)
returns integer
language plpgsql
as $$
declare
	rental_duration integer;
begin
	select sum(
		extract( day from return_date + '12:00:00' - rental_date)
	)
	into rental_duration
	from rental
	where customer_id= p_customer_id and
		  rental_date >= p_from_date;
	return rental_duration;
end; $$;

SELECT get_rental_duration(232);


-- Returning table
create or replace function get_film (
  p_pattern varchar
)
	returns table (
		film_title varchar,
		film_release_year int
	)
	language plpgsql
as $$
begin
	return query
		select
			title,
			release_year::integer
		from
			film
		where
			title ilike p_pattern;
end;$$;

SELECT * FROM get_film ('Al%');

SELECT get_film ('Al%');

create or replace function get_film (
	p_pattern varchar,
	p_year int
)
returns table (
	film_title varchar,
	film_release_year int
)
language plpgsql
as $$
declare
    var_r record;
begin
	for var_r in (
            select title, release_year
            from film
	     where title ilike p_pattern and
		    release_year = p_year
        ) loop  film_title := upper(var_r.title) ;
		    film_release_year := var_r.release_year;
           return next;
	end loop;
end; $$;

SELECT * FROM get_film ('%er', 2006);

drop function if exists get_film;
drop function if exists get_film(varchar, int);

SELECT routine_name
FROM information_schema.routines
WHERE routine_type='FUNCTION'
  AND specific_schema='public'
  AND routine_name LIKE 'get_%';

-- Stored procedures
drop table if exists bank_accounts;

create table bank_accounts (
    id int generated by default as identity,
    name varchar(100) not null,
    balance dec(15,2) not null,
    primary key(id)
);

insert into bank_accounts(name,balance)
values('Bob',10000);

insert into bank_accounts(name,balance)
values('Alice',10000);

select * from bank_accounts;

drop procedure if exists transfer(sender int, receiver int, amount dec);

create or replace procedure transfer(
   sender int,
   receiver int,
   amount dec
)
language plpgsql
as $$
begin
    -- subtracting the amount from the sender's account
    update bank_accounts
    set balance = balance - amount
    where id = sender;

    -- adding the amount to the receiver's account
    update bank_accounts
    set balance = balance + amount
    where id = receiver;

    commit;
end;$$;

call transfer(1,2,1000);
SELECT * FROM bank_accounts;

create or replace procedure transfer(
   sender int,
   receiver int,
   amount dec
)
language plpgsql
as $$
declare
    new_balance int;
begin
    update bank_accounts
    set balance = balance - amount
    where id = sender
    returning balance
    into new_balance;
    if new_balance >= 0 then
        commit;
        update bank_accounts
        set balance = balance + amount
        where id = receiver;
        commit;
    else
        rollback;
    end if;
end;$$;

call transfer(1,2,1000);
SELECT * FROM bank_accounts;

create or replace procedure insert_actor(
	lname varchar)
language plpgsql
as $$
begin
	insert into actor(first_name, last_name)
	values('John', lname);
end;
$$;

create or replace procedure insert_actor(
	fname varchar,
	lname varchar)
language plpgsql
as $$
begin
	insert into actor(first_name, last_name)
	values(fname,lname);
end;
$$;

create or replace procedure delete_actor(
	p_actor_id int
)
language plpgsql
as $$
begin
	delete from actor
	where actor_id = p_actor_id;
end;
$$;

create or replace procedure update_actor(
	p_actor_id int,
	fname varchar,
	lname varchar
)
language plpgsql
as $$
begin
	update actor
	set first_name = fname,
	    last_name = lname
	where actor_id = p_actor_id;
end;
$$;

drop procedure insert_actor;
drop procedure insert_actor(varchar);
drop procedure insert_actor;
drop procedure insert_actor(varchar,varchar);
drop procedure delete_actor, update_actor;

SELECT routine_name
FROM information_schema.routines
WHERE routine_type='PROCEDURE'
  AND specific_schema='public';